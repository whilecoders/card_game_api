# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddUserDto {
  city: String!
  email: String!
  password: String!
  phone_number: String!
  role: Role!
  username: String!
}

enum AuditActionType {
  CREATE
  DELETE
  UPDATE
}

enum AuditEntityType {
  DailyGame
  Game
  GameSession
  Transaction
  User
}

type AuditLog {
  action: AuditActionType!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  details: String
  entity: AuditEntityType!
  id: Int!
  updatedAt: DateTime!
  updatedBy: String!
  user_id: User
}

input AuditLogFiltersInput {
  action: String
  entity: String
  skip: Int!
  take: Int!
}

input CreateGameRouletteDto {
  admin_id: Int!
  end_date: DateTime!
  end_time: String!
  game_duration: Int!
  game_in_day: Int!
  game_status: GameStatus!
  game_type: GameType!
  start_date: DateTime!
  start_time: String!
}

input CreateGamesDto {
  admin_id: Int!
  end_date: DateTime!
  end_time: String!
  game_duration: Int!
  game_in_day: Int!
  game_status: GameStatus!
  game_type: GameType!
  start_date: DateTime!
  start_time: String!
}

input CreateNotificationInput {
  message: String!
  title: String!
  type: NotificationType! = MESSAGE
  userId: Float
}

input CreatePermissionInput {
  action: String!
  allowed: Boolean!
  role: Role
  userId: Int
}

input CreateRecordSessionKqjDto {
  choosen_card: GameKqjCards!
  gameSessionId: Int!
  record_status: RecordSessionStatus!
  token: TokenValues!
  userId: Int!
}

input CreateTransactionSessionDto {
  game_status: UserGameResultStatus!
  recordSessionId: Float!
  token: TokenValues!
}

type DailyGame {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  games: Games!
  id: Int!
  updatedAt: DateTime!
  updatedBy: String!
}

type DailyGameRoulette {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_roulette: GameRoulette!
  id: Int!
  updatedAt: DateTime!
  updatedBy: String!
}

type DailyWinnersAndLosers {
  losers: Float!
  winners: Float!
}

input DateFilterDto {
  endDate: DateTime
  startDate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum GameKqjCards {
  CLUBS
  DIAMONDS
  HEARTS
  JACK
  JACK_OF_CLUBS
  JACK_OF_DIAMONDS
  JACK_OF_HEARTS
  JACK_OF_SPADES
  KING
  KING_OF_CLUBS
  KING_OF_DIAMONDS
  KING_OF_HEARTS
  KING_OF_SPADES
  QUEEN
  QUEEN_OF_CLUBS
  QUEEN_OF_DIAMONDS
  QUEEN_OF_HEARTS
  QUEEN_OF_SPADES
  SPADES
}

type GameResultRoulette {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_status: UserGameResultStatus!
  id: Int!
  record_session_roulette: RecordSessionRoulette!
  token: Int!
  updatedAt: DateTime!
  updatedBy: String!
}

type GameRoulette {
  admin: User!
  createdAt: DateTime!
  createdBy: String!
  daily_game_roulette: [DailyGameRoulette!]
  deletedAt: DateTime!
  deletedBy: String!
  end_date: DateTime!
  end_time: String!
  game_duration: Float!
  game_in_day: Float!
  game_session_roulette: [GameSessionRoulette!]
  game_status: GameStatus!
  game_type: GameType!
  id: Int!
  start_date: DateTime!
  start_time: String!
  updatedAt: DateTime!
  updatedBy: String!
}

enum GameRouletteNumbers {
  EIGTH
  FIVE
  FOUR
  NINE
  ONE
  SEVEN
  SIX
  TEN
  THREE
  TWO
}

type GameSession {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game: Games!
  game_result_card: GameKqjCards
  id: Int!
  record_session_kqj: RecordSessionKqj
  session_end_time: DateTime
  session_start_time: DateTime
  session_status: GameSessionStatus!
  updatedAt: DateTime!
  updatedBy: String!
}

type GameSessionKqjStats {
  totalGamePlayed: Int!
  totalLosses: Int!
  totalWins: Int!
}

type GameSessionRoulette {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_result_number: GameRouletteNumbers
  game_roulette: GameRoulette!
  id: Int!
  record_session_roulette: RecordSessionRoulette
  session_end_time: DateTime
  session_start_time: DateTime
  session_status: GameSessionStatus!
  updatedAt: DateTime!
  updatedBy: String!
}

enum GameSessionStatus {
  END
  INACTIVE
  LIVE
  UPCOMING
}

enum GameStatus {
  AVAILABLE
  FINISHED
  UNAVAILABLE
  UPCOMING
}

enum GameType {
  KQJ
  ROULETTE
}

type Games {
  DailyGame: [DailyGame!]
  admin: User!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  end_date: DateTime!
  end_time: String!
  gameSession: [GameSession!]
  game_duration: Float!
  game_in_day: Float!
  game_status: GameStatus!
  game_type: GameType!
  id: Int!
  start_date: DateTime!
  start_time: String!
  updatedAt: DateTime!
  updatedBy: String!
}

type GuestToken {
  access_token: String!
  refresh_token: String!
  role: Role!
}

type Message {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!

  """Example field (placeholder)"""
  exampleField: Int!
  id: Int!
  imageUrl: String!
  message: String!
  messageType: MessageType!
  updatedAt: DateTime!
  updatedBy: String!
}

enum MessageType {
  AUDIO
  IMAGE
  INFO
  MESSAGE
  TRADE
  VIDEO
}

type Mutation {
  DeleteGames(id: Int!): Boolean!
  addUser(addUserDto: AddUserDto!): User!
  adminSignUp(signUpCredential: SignUpCredential!): User!
  createGameRoulette(createGameRouletteDto: CreateGameRouletteDto!): GameRoulette!
  createGames(createGamesDto: CreateGamesDto!): Games!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!

  """Create a new permission"""
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createRecordSession(createRecordSessionKqjDto: CreateRecordSessionKqjDto!): RecordSessionKqj!
  createTransactionSession(createTransactionSessionDto: CreateTransactionSessionDto!): TransactionSession!
  deleteGameRoulette(id: Int!): Boolean!
  deleteUser(adminId: Float!, userId: Float!): Boolean!
  markSessionAsCompleted(gameSessionId: Int!): Boolean!
  refreshAccessToken(refreshToken: String!, token: String!): Token!
  removeSessionFromGame(deleteBy: Int!, gameSessionId: Int!): Boolean!
  removeUserFromGame(deleteBy: Int!, gameSessionId: Int!, userId: Int!): Boolean!
  resetPassword(resetPasswordDto: ResetPasswordDto!): String!
  restrictRoleAction(action: String!, role: Role!): String!
  restrictUserAction(action: String!, userId: Float!): String!
  sendOtp(mobile: String!): String!
  setTransactionPassword(id: Int!, transactionPassword: String!): Boolean!
  suspendUser(suspendUserDto: SuspendUserDto!): User!
  unrestrictRoleAction(action: String!, role: Role!): String!
  unrestrictUserAction(action: String!, userId: Float!): String!
  updateGameRoulette(updateGameRouletteDto: UpdateGameRouletteDto!): GameRoulette!
  updateGameSession(id: Int!, updateGameSessionRouletteDto: UpdateGameSessionRouletteDto!): GameSessionRoulette!
  updateGames(updateGamesDto: UpdateGamesDto!): Games!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  updateUser(id: Int!, updateUserDto: UpdateUserDto!): User!
  updateUserRecordStatus(gameSessionId: Int!, recordStatus: RecordSessionStatus!, userId: Int!): RecordSessionKqj!
  updateUserWallet(id: Int!, updateUserDto: UpdateUserDto!): User!
  updateWallet(adminId: Int!, userId: Int!, walletData: WalletDto!): Transaction!
  userSignUp(signUpCredential: SignUpCredential!): User!
  verifyOtp(mobile: String!, otp: String!): String!
  verifyTransactionPassword(id: Int!, transactionPassword: String!): Boolean!
}

type Notification {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  id: Int!
  message: String!
  status: NotificationStatus!
  title: String!
  type: NotificationType!
  updatedAt: DateTime!
  updatedBy: String!
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  COMMENT
  LIKE
  MESSAGE
  SYSTEM
}

type PaginatedAuditLogDto {
  count: Int!
  data: [AuditLog!]!
  skip: Int!
  take: Int!
}

type PaginatedGameRouletteDto {
  count: Int!
  data: [Games!]!
  skip: Int!
  take: Int!
}

type PaginatedGameSessionKqjDto {
  count: Int!
  data: [GameSession!]!
  skip: Int!
  take: Int!
}

type PaginatedGameSessionRouletteDto {
  count: Int!
  data: [GameSessionRoulette!]!
  skip: Int!
  take: Int!
}

type PaginatedGamesDto {
  count: Int!
  data: [Games!]!
  skip: Int!
  take: Int!
}

type PaginatedUserDto {
  count: Int!
  data: [User!]!
  skip: Int!
  take: Int!
}

input PaginationMetadataDto {
  count: Int
  skip: Int!
  take: Int!
}

type Permission {
  action: String!
  allowed: Boolean!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  id: Int!
  role: Role
  updatedAt: DateTime!
  updatedBy: String!
  user: User
}

type ProfitAndLoss {
  loss: Float!
  net: Float!
  profit: Float!
}

type Query {
  GuestSignIn: GuestToken!
  getAllAuditLog(AuditLogFiltersInput: AuditLogFiltersInput!): PaginatedAuditLogDto!
  getAllGameSessions(skip: Int!, take: Int!): PaginatedGameSessionRouletteDto!
  getAllGamesRoulette(skip: Int!, take: Int!): PaginatedGameRouletteDto!
  getAllGameses(skip: Int!, take: Int!): PaginatedGamesDto!
  getAllRecordSessions: [RecordSessionKqj!]!
  getAllRecordsBySessionId(sessionId: Int!): RecordSessionKqjPagination!
  getAllTransactionSessions: [TransactionSession!]!
  getAllUsers(skip: Int!, take: Int!): PaginatedUserDto!
  getCurrentRunningSessions: [GameSession!]!
  getDailyWinnersAndLosers: DailyWinnersAndLosers!
  getDeletedNotifications(userId: Float!): [Notification!]!
  getFinishedSessionsByDateOrToday(filter: DateFilterDto): Float!
  getGameResultByUserId(userId: Int!): [TransactionSession!]!
  getGameRouletteByDateOrToday(filter: DateFilterDto): [GameRoulette!]!
  getGameSessionById(id: Int!): GameSession!
  getGameSessionRouletteById(id: Int!): GameSessionRoulette!
  getGameSessionsByDateOrToday(filter: DateFilterDto): [GameSession!]!
  getGameSessionsRouletteByDateOrToday(filter: DateFilterDto): [GameSessionRoulette!]!
  getGamesBy(id: Int!): GameRoulette!
  getGamesByDate(filter: DateFilterDto): [Games!]!
  getGamesByDateOrToday(filter: DateFilterDto): [Games!]!
  getLiveGameSessionRoulette: GameSessionRoulette
  getLiveGameSessions: GameSession!
  getPermissions(role: Role, userId: Float): [Permission!]!
  getPlayerStateByUserId(userId: Int!): GameSessionKqjStats!
  getProfitAndLoss(date: DateTime): ProfitAndLoss!
  getRecordSessionBy(id: Int!): RecordSessionKqj!
  getRecordsBy(UserId: Int!): [RecordSessionKqj!]!
  getRecordsByDate(filter: DateFilterDto): [RecordSessionKqj!]!
  getTotalSessionsDateOrToday(filter: DateFilterDto): Float!
  getTotalTokensToday(filter: DateFilterDto): Float!
  getTotalUsersByDateOrToday(filter: DateFilterDto): Float!
  getTransactionSessionById(id: Int!): TransactionSession!
  getTransactionsByDate(filter: DateFilterDto): [TransactionSession!]!
  getTransactionsByUserId(userId: Int!): [Transaction!]!
  getUpcomingSessions: [GameSession!]!
  getUserById(id: Int!): User!
  getUserByRole(role: String!): [User!]!
  getUserNotifications(userId: Float!): [Notification!]!
  getUsersByCreatedAt(date: DateTime!): [User!]!
  searchRecords(offset: PaginationMetadataDto!, searchTerm: String!, sessionId: Int!): RecordSessionKqjPagination!
  searchUser(UserFiltersInput: UserFiltersInput!): PaginatedUserDto!
  signIn(signInCredential: SignInCredential!): UserToken!
  signInAdmin(signInCredential: SignInCredential!): UserToken!
}

type RecordSessionKqj {
  choosen_card: GameKqjCards!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_session_id: GameSession!
  id: Int!
  record_status: RecordSessionStatus!
  token: TokenValues!
  transaction_session: TransactionSession
  updatedAt: DateTime!
  updatedBy: String!
  user: User!
}

type RecordSessionKqjPagination {
  data: [RecordSessionKqj!]!
  totalSize: Int!
}

type RecordSessionRoulette {
  choosen_number: GameRouletteNumbers!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_result_roulette: GameResultRoulette
  game_session_roulette: GameSessionRoulette!
  id: Int!
  record_status: RecordSessionStatus!
  token: TokenValues!
  updatedAt: DateTime!
  updatedBy: String!
  user: User!
}

enum RecordSessionStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

input ResetPasswordDto {
  confirmPassword: String!
  currentPassword: String!
  id: Int!
  newPassword: String!
}

enum Role {
  ADMIN
  ANNOUNCER
  GUEST
  MASTER
  SUPERADMIN
  SYSTEM
  USER
}

type Room {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  id: Int!
  latestMessage: Message!
  members: [User!]!
  messages: [Message!]!
  updatedAt: DateTime!
  updatedBy: String!
}

input SignInCredential {
  password: String!
  username: String!
}

input SignUpCredential {
  city: String!
  email: String!
  password: String!
  phone_number: String!
  role: Role
  username: String!
}

input SuspendUserDto {
  userId: Int!
}

type Token {
  access_token: String!
  refresh_token: String!
}

enum TokenValues {
  TOKEN_11
  TOKEN_55
  TOKEN_100
  TOKEN_110
  TOKEN_550
  TOKEN_1100
  TOKEN_5500
}

type Transaction {
  admin: User!
  amount: Float!
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  id: Int!
  transactionDate: DateTime!
  type: TransactionType!
  updatedAt: DateTime!
  updatedBy: String!
  user: User!
}

type TransactionSession {
  createdAt: DateTime!
  createdBy: String!
  deletedAt: DateTime!
  deletedBy: String!
  game_status: UserGameResultStatus!
  id: Int!
  record_session_kqj: RecordSessionKqj!
  token: Int!
  updatedAt: DateTime!
  updatedBy: String!
}

enum TransactionType {
  CREDIT
  DEBIT
}

input UpdateGameRouletteDto {
  admin_id: Int!
  end_date: DateTime!
  end_time: String!
  game_duration: Int
  game_id: Int!
  game_in_day: Int
  game_status: GameStatus
  game_type: GameType
  start_date: DateTime!
  start_time: String!
}

input UpdateGameSessionRouletteDto {
  game_result_roulette_number: GameRouletteNumbers!
}

input UpdateGamesDto {
  admin_id: Int!
  end_date: DateTime!
  end_time: String!
  game_duration: Int
  game_id: Int!
  game_in_day: Int
  game_status: GameStatus
  game_type: GameType
  start_date: DateTime!
  start_time: String!
}

input UpdateNotificationInput {
  deletedAt: DateTime
  deletedBy: String
  id: Int!
  message: String
  status: NotificationStatus
  title: String
  type: NotificationType
}

input UpdateUserDto {
  address: String
  city: String
  email: String
  first_time_password_reset: Boolean
  name: String
  otp: String
  phone_number: String
  role: Role
  status: UserStatus
  username: String
  wallet: Float
  wallet_limit: Float
}

type User {
  address: String
  audit_log_id: AuditLog!
  city: String!
  createdAt: DateTime!
  createdBy: String!
  createdGames: Games!
  credit_referance: Int!
  deletedAt: DateTime!
  deletedBy: String!
  email: String!
  first_time_password_reset: Boolean!
  game_roulete: GameRoulette!
  id: Int!
  name: String
  otp: String
  password: String!
  permissions: Permission!
  phone_number: String!
  profile: String
  record_session_kqj: RecordSessionKqj!
  record_session_roulette: RecordSessionRoulette!
  role: Role!
  roomMember: Room!
  status: UserStatus!
  transaction_password: String!
  updatedAt: DateTime!
  updatedBy: String!
  userTransactions: Transaction!
  username: String!
  wallet: Float!
  wallet_limit: Float!
}

input UserFiltersInput {
  city: String
  email: String
  id: Int
  name: String
  phone_number: String
  role: Role
  skip: Int!
  status: UserStatus
  take: Int!
  username: String
}

enum UserGameResultStatus {
  LOSS
  WIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type UserToken {
  access_token: String!
  refresh_token: String!
  user: User!
}

input WalletDto {
  token: TokenValues!
  type: TransactionType!
}